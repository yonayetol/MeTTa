!(import! &self variable_identifier)

;;;;;; depth generator ;;;;;; 
( = (generateDepth $size) 
    (
        if (== $size 0)
            ()
            (S (generateDepth (- $size 1)))
    )
) 

;;;;; checks membership of something in a given set of things
( = (does-exist $unknown $storage)
    (
        if (== $storage ())
            False
            (
                let*
                    (
                        ($top (car-atom $storage))
                        ($leftExpression (cdr-atom $storage))
                    )
                    
                    (
                        if (== $top $unknown)
                            True
                            (does-exist $unknown $leftExpression)
                    )
            )
    )
) 

;;;;;; checker checks whether the combo given has at-least one element from set of variables of pattern 1, return (empty) if not
( = (checker $the_real_combo $combo $var1)
    (
        if (== $combo ())
            (empty)
            (
                let*
                    (
                        ($headOfCombo (car-atom $combo))
                        ($tailOfCombo (cdr-atom $combo))
                    )
                    (
                        if (does-exist $headOfCombo $var1)  
                            $the_real_combo
                            (checker $the_real_combo $tailOfCombo $var1 )
                    )
            )
         
    )
)  

;;;;; interface with the checker function
( = (purifier $current $var1)
    (
        let () (println! (working on $current ... ))
        (checker $current $current $var1)  
    )
        
) 

( = (combiner $accumulated $vars ()) $accumulated )
;;;;; makes combinations by pre-killing what is going to make repetition 
( = (combiner $accumulated $vars (S $depth)) 
    (
        let*
            (
                ($randomVar (superpose $vars))
                ($shouldBePreKilled (does-exist $randomVar $accumulated))
                ($joiner (union-atom $accumulated ($randomVar) ) )
            )
            (
                if $shouldBePreKilled
                    (empty)
                    (combiner $joiner $vars $depth)

            ) 
    )

)

;;;;; the main function the caller of everything
( = (all-variable-combination $pattern1 $pattern2)
    (
        let*
            (
                ($varsInPat1 (get-variables $pattern1))
                ($varsInPat2 (get-variables $pattern2)) 
                ($width (size-atom $varsInPat2)) 
                ($unpurifiedAllCombinations (collapse (combiner () (union-atom $varsInPat1 $varsInPat2) (generateDepth $width) )) )   
            )
            
            ( let $var1Exist (collapse (purifier (superpose $unpurifiedAllCombinations) $varsInPat1)) $var1Exist )   
    )
)
 
!(all-variable-combination (hi this is $name $second) (i am $age years $old living in city  ) ) 
